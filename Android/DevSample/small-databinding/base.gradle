apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    if (gradle.startParameter.projectDir == project.projectDir) {
        compileOnly 'net.wequick.small:small:1.3.0-beta3'
    } else {
        compileOnly project(':small')
    }
    compileOnly 'com.android.databinding:library:1.3.1'
    compileOnly 'com.android.databinding:baseLibrary:2.3.0'
    compileOnly 'com.android.databinding:adapters:1.3.1'
}

//
// Script to provided 'android.databinding.DataBindingComponent' class
//

afterEvaluate {
    Jar stubJarTask = project.tasks['packageStubDataBindingClasses']
    JavaCompile stubJavac = project.tasks['compileStubDataBindingWithJavac']
    stubJarTask.dependsOn stubJavac
    project.tasks.withType(JavaCompile.class).each {
        if (it == stubJavac) return

        it.dependsOn stubJarTask
        it.doFirst {
            it.classpath += project.fileTree(dir: stubJarTask.destinationDir, include: ['*.jar'])
        }
    }
}

project.task('compileStubDataBindingWithJavac', type: JavaCompile) { JavaCompile javac ->
    File sourceDir = new File(project.projectDir, 'src/main/stub')
    File destinationDir = new File(project.buildDir, 'intermediates/classes/stub')

    javac.source = sourceDir
    javac.destinationDir destinationDir

    javac.classpath = project.configurations.getByName('compile')
    javac.inputs.dir sourceDir
    javac.outputs.dir destinationDir
}

project.task('packageStubDataBindingClasses', type: Jar) { Jar jar ->
    File classesDir = compileStubDataBindingWithJavac.destinationDir
    File destinationDir = new File(project.buildDir, 'intermediates/jar/stub')

    jar.extensions.add('classesDir', classesDir)
    jar.inputs.dir classesDir
    jar.outputs.dir destinationDir

    jar.from classesDir
    jar.destinationDir destinationDir
}